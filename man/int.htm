<html>

<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>INT</title>
    <link rel="stylesheet" href="https://n2o.dev/blank.css?x=12"/>
    <link rel="stylesheet" href="https://n2o.dev/zima.css?x=12"/>
</head>

<body>

<nav>
    <a href='https://n2o.space'>ECO</a>
    <a href='https://o3.click'>O3</a>
    <a href='../index.html'>N2O</a>
</nav>

<header>
    <a href="../index.html"><img src="https://avatars.githubusercontent.com/u/45380730?s=200&v=4"></a>
    <h1>INT</h1>
</header>

<main>
    <section>
        <h3>INTRO</h3>
        <p>The <b>Network.N2O.Internal</b> module contains request and context definition, state and N2O monad.</p>
    </section>
    <section>
        <h3>REQUEST</h3>
        <figure><figcaption>Listing 1. HTTP Request</figcaption><code>
 type Header = (BS.ByteString, BS.ByteString)
 data Req = Req
    { reqPath :: BS.ByteString
    , reqMeth :: BS.ByteString
    , reqVers :: BS.ByteString
    , reqHead :: [Header]
    }
        </code></figure>
        <figure><figcaption>Listing 2. HTTP Response</figcaption><code>
 data Resp = Resp
    { respCode :: Int
    , respHead :: [Header]
    , respBody :: BS.ByteString
    } deriving (Show)
        </code></figure>
    </section>
    <section>
        <h3>CONTEXT</h3>
        <figure><figcaption>Listing 3. N2O Protocol Closure</figcaption><code>
 data Event a
    = Init
    | Message a
    | Terminate
      deriving Show
        </code></figure>
        <figure><figcaption>Listing 4. N2O Protocol Result</figcaption><code>
 data Result a
    = Reply a
    | Ok
    | Unknown
    | Empty
      deriving (Show, Eq)
        </code></figure>
        <figure><figcaption>Listing 5. N2O Context Record</figcaption><code>
 data Context (f :: * -> *) a where Context ::
    { cxHandler :: Event a -> N2O f a (Result a)
    , cxReq :: Req
    , cxMiddleware :: [Context f a -> Context f a]
    , cxProtos :: [Proto f a]
    , cxActions :: BS.ByteString
    , cxDict :: M.Map BS.ByteString BS.ByteString
    } -> Context f a
        </code></figure>
        <figure><figcaption>Listing 6. N2O Context Constructor</figcaption><code>
 mkCx = Context
    { cxReq = undefined
    , cxHandler = undefined
    , cxMiddleware = []
    , cxProtos = []
    , cxActions = ""
    , cxDict = M.empty
    }
        </code></figure>
    </section>
    <section>
        <h3>MONAD</h3>

        <figure><figcaption>Listing 7. N2O Monad</figcaption><code>
 type Proto (f :: * -> *) a
    = (f a) -> N2O f a (Result (f a))

 type N2O f a
    = ReaderT (IORef (Context f a)) IO
        </code></figure>

        <h4>put :: (B.Serialize bin) => BS.ByteString -> bin -> N2O f a ()</h4>
        <h4>get :: (B.Serialize bin) => BS.ByteString -> N2O f a (Maybe bin)</h4>
        <h4>getContext :: N2O f a (Context f a)</h4>
        <h4>nop :: Result a</h4>
        <h4>protoRun :: f a -> [Proto f a] -> N2O f a (Result (f a))</h4>
    </section>
    <section>
        <p>This module may refer to:
        <b><a href="int.htm">INT</a></b>,
        <b><a href="core.htm">CORE</a></b>
        </p>
    </section>
</main>

<footer>
    Made with <span class="heart">‚ù§</span> to Haskell and N2O
</footer>

</body>
</html>
